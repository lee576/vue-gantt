{"remainingRequest":"D:\\IloveCode\\Gantt\\node_modules\\babel-loader\\lib\\index.js!D:\\IloveCode\\Gantt\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\IloveCode\\Gantt\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\IloveCode\\Gantt\\src\\components\\gantt\\Bar.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\IloveCode\\Gantt\\src\\components\\gantt\\Bar.vue","mtime":1646462937484},{"path":"D:\\IloveCode\\Gantt\\babel.config.js","mtime":1642127355809},{"path":"D:\\IloveCode\\Gantt\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IloveCode\\Gantt\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\IloveCode\\Gantt\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IloveCode\\Gantt\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Bar.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <svg @mouseenter.self=\"mouseenter\" ref='bar' class=\"bar\" :width=\"barWidth + 'px'\" :height=\"barHeight + 'px'\"></svg>\r\n</template>\r\n<script>\r\nimport Snap from 'snapsvg-cjs'\r\nimport interact from 'interactjs'\r\nimport { store } from '@/components/gantt/store.js'\r\nexport default {\r\n  name: 'Bar',\r\n  props : {\r\n    rowHeight: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    row: {\r\n      type: Object,\r\n      default: () => {}\r\n    },\r\n    startGanttDate: {\r\n      type: String\r\n    },\r\n    endGanttDate: {\r\n      type: String\r\n    }\r\n  },\r\n\tdata() {\r\n\t\treturn {\r\n      // Bar的高度占容器Row行高的70%, 高度随容器行高变化而变化\r\n      barHeight: this.rowHeight * 0.7,\r\n      barWidth: 0,\r\n      // resize 的拖动方向\r\n      direction: null,\r\n      oldBarDataX: 0\r\n    };\r\n\t},\r\n\tcomputed: {\r\n    timelineCellCount (){\r\n      return store.timelineCellCount\r\n    },\r\n    scale (){\r\n      return store.scale\r\n    },\r\n    mode () {\r\n      return store.mode\r\n    }\r\n  },\r\n\tcreated() {},\r\n\tmounted() {\r\n    this.$nextTick(() => {\r\n      this.barWidth = this.scale\r\n      // console.log(this.startGanttDate)\r\n      // console.log(this.endGanttDate)\r\n\r\n      console.log(this.mode)\r\n\r\n      let that = this\r\n      const bar = this.$refs.bar;\r\n      let svg = Snap(bar);\r\n      \r\n      // 定义一个斜条纹的画笔\r\n      let p = svg.path(\"M10-5-10,15M15,0,0,15M0-5-20,15\").attr({\r\n          fill: \"none\",\r\n          strokeOpacity: '.4',\r\n          stroke: \"gray\",\r\n          strokeWidth: 5\r\n      }).pattern(0, 0, 10, 10)\r\n      svg.rect(0, 0, this.scale, this.barHeight, 10).attr({fill: p})\r\n      let g = svg.g();\r\n      let innerRect = svg.rect(0, 0, this.scale / 2, this.barHeight, 10)\r\n      // 半透明\r\n      innerRect.attr({fill: 'red',fillOpacity: '.4'})\r\n      innerRect.attr({width: this.scale / 2})\r\n      // 居中显示文字\r\n      let text = svg.text(innerRect.node.width.baseVal.value / 2, '50%', \"50%\").attr({\r\n          stroke: \"white\",\r\n          dominantBaseline: 'middle',\r\n          fontSize: '15px'\r\n      });\r\n      // 文本居中\r\n      let xPosition = innerRect.node.width.baseVal.value / 2 - text.getBBox().width / 2\r\n      if( xPosition < 0) {\r\n        text.attr('x', innerRect.node.width.baseVal.value / 2)\r\n      } else {\r\n        text.attr('x', xPosition)\r\n      }\r\n      g.add(innerRect)\r\n      g.add(text)\r\n      \r\n      interact(bar).draggable({\r\n          // enable inertial throwing\r\n          inertia: false,\r\n          // keep the element within the area of #app\r\n          modifiers: [\r\n              interact.modifiers.restrictRect({\r\n                  restriction: 'parent', // restriction: 'parent',\r\n                  endOnly: true\r\n              })\r\n          ],\r\n          // enable autoScroll\r\n          autoScroll: true,\r\n          listeners: {\r\n              // call this function on every dragmove event\r\n              move: dragMoveListener,\r\n              // call this function on every dragend event\r\n              end(event) {\r\n                let target = event.target\r\n                let x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx\r\n                // 确保 bar 首尾永远落在单元格的边框上\r\n                let multiple = Math.floor(x / that.scale)\r\n                x = multiple * that.scale\r\n                if(x > that.timelineCellCount * that.scale) {\r\n                  x = that.timelineCellCount * that.scale\r\n                }\r\n                // translate the element\r\n                target.style.webkitTransform =\r\n                    target.style.transform =\r\n                    'translate(' + x + 'px, 0px)'\r\n                target.setAttribute('data-x', x)\r\n              }\r\n          },\r\n      })\r\n      \r\n      interact(bar).resizable({\r\n        // resize from all edges and corners\r\n        edges: { left: true, right: true, bottom: false, top: false },\r\n        listeners: {\r\n          end: (event) => {\r\n            // 记住最初 Bar 的宽度\r\n            const _barWidth =  this.barWidth\r\n\r\n            // that.row.start_date = '0001-01-01 00:00:00'\r\n            // that.row.end_date = '0001-01-01 23:59:59'\r\n            let target = event.target\r\n            //let x = (parseFloat(target.getAttribute('data-x')) || 0)\r\n            let x = 0\r\n            // 拖动的是 Bar 的右边边缘\r\n            if(event.edges.right) { \r\n              let remainWidth = event.rect.width % this.scale\r\n              if(remainWidth !== 0) {\r\n                let multiple = Math.floor(event.rect.width / this.scale)\r\n                // 拖到超过比例尺最小单位一半宽度\r\n                if(remainWidth < (this.scale / 2)) {\r\n                  event.rect.width = multiple * this.scale\r\n                } else {\r\n                  // 拖到不足比例尺最小单位一半宽度\r\n                  event.rect.width = (multiple + 1) * this.scale\r\n                }\r\n              }\r\n            }\r\n            \r\n            // 拖动的是 Bar 的左边边缘\r\n            if(event.edges.left) {  \r\n              let offset = (Math.floor(Math.abs(event.rect.width - _barWidth) / this.scale) + 1)* this.scale\r\n              if(offset < this.scale) {\r\n                offset = this.scale\r\n              }\r\n              if (event.deltaRect.left < 0) {\r\n                event.rect.width = _barWidth + offset\r\n              }\r\n              else {\r\n                event.rect.width = _barWidth - offset\r\n              }\r\n              if (event.rect.width < this.scale)\r\n                event.rect.width = this.scale\r\n              if (event.rect.width > this.timelineCellCount * this.scale)\r\n                event.rect.width = this.timelineCellCount * this.scale\r\n\r\n              x = Number(this.oldBarDataX) - Number(event.rect.width - _barWidth)\r\n              if(x < 0)\r\n                x = 0\r\n            }\r\n            else {\r\n              x = (parseFloat(target.getAttribute('data-x')) || 0)\r\n            }\r\n            // update the element's style\r\n            target.style.width = event.rect.width + 'px'\r\n            target.style.webkitTransform = target.style.transform = 'translate(' + x + 'px, 0px)'\r\n            target.setAttribute('data-x', x)\r\n            target.textContent = Math.round(event.rect.width) + '\\u00D7' + Math.round(event.rect.height)\r\n\r\n            let svg = Snap(bar);\r\n            // 定义一个斜条纹的画笔\r\n            let p = svg.path(\"M10-5-10,15M15,0,0,15M0-5-20,15\").attr({\r\n                fill: \"none\",\r\n                strokeOpacity: '.4',\r\n                stroke: \"gray\",\r\n                strokeWidth: 5\r\n            }).pattern(0, 0, 10, 10)\r\n\r\n            svg.rect(0, 0,event.rect.width, event.rect.height, 10).attr({fill: p})\r\n            let g = svg.g();\r\n            let innerRect = svg.rect(0, 0, event.rect.width / 2, event.rect.height, 10)\r\n\r\n            // 半透明\r\n            innerRect.attr({fill: 'red',fillOpacity: '.4'})\r\n            let text = svg.text(innerRect.node.width.baseVal.value / 2, '50%', \"50%\").attr({\r\n                stroke: \"white\",\t// 蓝色\r\n                dominantBaseline: 'middle',\r\n                fontSize: '15px'\r\n            });\r\n\r\n            // 文本居中\r\n            let xPosition = innerRect.node.width.baseVal.value / 2 - text.getBBox().width / 2\r\n            if( xPosition < 0) {\r\n              text.attr('x', innerRect.node.width.baseVal.value / 2)\r\n            } else {\r\n              text.attr('x', xPosition)\r\n            }\r\n            this.barWidth = event.rect.width\r\n            g.add(innerRect)\r\n            g.add(text)\r\n          }\r\n        },\r\n        modifiers: [\r\n          // keep the edges inside the parent\r\n          interact.modifiers.restrictEdges({\r\n            outer: 'parent'\r\n          }),\r\n\r\n          // minimum size\r\n          interact.modifiers.restrictSize({\r\n            min: { width: this.scale, height: this.barHeight },\r\n            max: { width: this.scale * this.timelineCellCount, height: this.barHeight }\r\n          })\r\n        ],\r\n        inertia: false,\r\n        hold: 1\r\n      })\r\n      // 拖动只改变x轴的坐标\r\n      function dragMoveListener(event) {\r\n        let {x} = event.target.dataset\r\n        x = (parseFloat(event.target.getAttribute('data-x')) || 0) + event.dx\r\n        Object.assign(event.target.style, {\r\n          width: `${event.rect.width}px`,\r\n          height: `${event.rect.height}px`,\r\n          transform: `translate(${x}px, 0px)`\r\n        })\r\n\r\n        event.target.setAttribute('data-x', x)\r\n        event.target.setAttribute('data-y', 0)\r\n      }\r\n    })\r\n\t},\r\n\tmethods: {\r\n    isChildOf(child, parent) {\r\n      if(child && parent) {\r\n          let parentNode = child.parentNode;\r\n          while(parentNode) {\r\n              if(parent === parentNode) {\r\n                  return true;\r\n              }\r\n              parentNode = parentNode.parentNode;\r\n          }\r\n      }\r\n      return false;\r\n    },\r\n    mouseenter(event) {\r\n      // 记录最初的 x轴值\r\n      this.oldBarDataX = event.srcElement.getAttribute('data-x')\r\n      event.stopPropagation()\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style scoped>\r\n.bar {\r\n  position: absolute;\r\n  z-index: 100;\r\n}\r\n</style>\r\n\r\n"],"sourceRoot":"src/components/gantt"}]}