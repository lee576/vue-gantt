{"remainingRequest":"D:\\IloveCode\\Gantt\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\IloveCode\\Gantt\\src\\components\\gantt\\Bar.vue?vue&type=style&index=0&id=7c4f0850&scoped=true&lang=css&","dependencies":[{"path":"D:\\IloveCode\\Gantt\\src\\components\\gantt\\Bar.vue","mtime":1646462937484},{"path":"D:\\IloveCode\\Gantt\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IloveCode\\Gantt\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\IloveCode\\Gantt\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\IloveCode\\Gantt\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IloveCode\\Gantt\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQouYmFyIHsNCiAgcG9zaXRpb246IGFic29sdXRlOw0KICB6LWluZGV4OiAxMDA7DQp9DQo="},{"version":3,"sources":["Bar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyQA;AACA;AACA;AACA","file":"Bar.vue","sourceRoot":"src/components/gantt","sourcesContent":["<template>\r\n  <svg @mouseenter.self=\"mouseenter\" ref='bar' class=\"bar\" :width=\"barWidth + 'px'\" :height=\"barHeight + 'px'\"></svg>\r\n</template>\r\n<script>\r\nimport Snap from 'snapsvg-cjs'\r\nimport interact from 'interactjs'\r\nimport { store } from '@/components/gantt/store.js'\r\nexport default {\r\n  name: 'Bar',\r\n  props : {\r\n    rowHeight: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    row: {\r\n      type: Object,\r\n      default: () => {}\r\n    },\r\n    startGanttDate: {\r\n      type: String\r\n    },\r\n    endGanttDate: {\r\n      type: String\r\n    }\r\n  },\r\n\tdata() {\r\n\t\treturn {\r\n      // Bar的高度占容器Row行高的70%, 高度随容器行高变化而变化\r\n      barHeight: this.rowHeight * 0.7,\r\n      barWidth: 0,\r\n      // resize 的拖动方向\r\n      direction: null,\r\n      oldBarDataX: 0\r\n    };\r\n\t},\r\n\tcomputed: {\r\n    timelineCellCount (){\r\n      return store.timelineCellCount\r\n    },\r\n    scale (){\r\n      return store.scale\r\n    },\r\n    mode () {\r\n      return store.mode\r\n    }\r\n  },\r\n\tcreated() {},\r\n\tmounted() {\r\n    this.$nextTick(() => {\r\n      this.barWidth = this.scale\r\n      // console.log(this.startGanttDate)\r\n      // console.log(this.endGanttDate)\r\n\r\n      console.log(this.mode)\r\n\r\n      let that = this\r\n      const bar = this.$refs.bar;\r\n      let svg = Snap(bar);\r\n      \r\n      // 定义一个斜条纹的画笔\r\n      let p = svg.path(\"M10-5-10,15M15,0,0,15M0-5-20,15\").attr({\r\n          fill: \"none\",\r\n          strokeOpacity: '.4',\r\n          stroke: \"gray\",\r\n          strokeWidth: 5\r\n      }).pattern(0, 0, 10, 10)\r\n      svg.rect(0, 0, this.scale, this.barHeight, 10).attr({fill: p})\r\n      let g = svg.g();\r\n      let innerRect = svg.rect(0, 0, this.scale / 2, this.barHeight, 10)\r\n      // 半透明\r\n      innerRect.attr({fill: 'red',fillOpacity: '.4'})\r\n      innerRect.attr({width: this.scale / 2})\r\n      // 居中显示文字\r\n      let text = svg.text(innerRect.node.width.baseVal.value / 2, '50%', \"50%\").attr({\r\n          stroke: \"white\",\r\n          dominantBaseline: 'middle',\r\n          fontSize: '15px'\r\n      });\r\n      // 文本居中\r\n      let xPosition = innerRect.node.width.baseVal.value / 2 - text.getBBox().width / 2\r\n      if( xPosition < 0) {\r\n        text.attr('x', innerRect.node.width.baseVal.value / 2)\r\n      } else {\r\n        text.attr('x', xPosition)\r\n      }\r\n      g.add(innerRect)\r\n      g.add(text)\r\n      \r\n      interact(bar).draggable({\r\n          // enable inertial throwing\r\n          inertia: false,\r\n          // keep the element within the area of #app\r\n          modifiers: [\r\n              interact.modifiers.restrictRect({\r\n                  restriction: 'parent', // restriction: 'parent',\r\n                  endOnly: true\r\n              })\r\n          ],\r\n          // enable autoScroll\r\n          autoScroll: true,\r\n          listeners: {\r\n              // call this function on every dragmove event\r\n              move: dragMoveListener,\r\n              // call this function on every dragend event\r\n              end(event) {\r\n                let target = event.target\r\n                let x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx\r\n                // 确保 bar 首尾永远落在单元格的边框上\r\n                let multiple = Math.floor(x / that.scale)\r\n                x = multiple * that.scale\r\n                if(x > that.timelineCellCount * that.scale) {\r\n                  x = that.timelineCellCount * that.scale\r\n                }\r\n                // translate the element\r\n                target.style.webkitTransform =\r\n                    target.style.transform =\r\n                    'translate(' + x + 'px, 0px)'\r\n                target.setAttribute('data-x', x)\r\n              }\r\n          },\r\n      })\r\n      \r\n      interact(bar).resizable({\r\n        // resize from all edges and corners\r\n        edges: { left: true, right: true, bottom: false, top: false },\r\n        listeners: {\r\n          end: (event) => {\r\n            // 记住最初 Bar 的宽度\r\n            const _barWidth =  this.barWidth\r\n\r\n            // that.row.start_date = '0001-01-01 00:00:00'\r\n            // that.row.end_date = '0001-01-01 23:59:59'\r\n            let target = event.target\r\n            //let x = (parseFloat(target.getAttribute('data-x')) || 0)\r\n            let x = 0\r\n            // 拖动的是 Bar 的右边边缘\r\n            if(event.edges.right) { \r\n              let remainWidth = event.rect.width % this.scale\r\n              if(remainWidth !== 0) {\r\n                let multiple = Math.floor(event.rect.width / this.scale)\r\n                // 拖到超过比例尺最小单位一半宽度\r\n                if(remainWidth < (this.scale / 2)) {\r\n                  event.rect.width = multiple * this.scale\r\n                } else {\r\n                  // 拖到不足比例尺最小单位一半宽度\r\n                  event.rect.width = (multiple + 1) * this.scale\r\n                }\r\n              }\r\n            }\r\n            \r\n            // 拖动的是 Bar 的左边边缘\r\n            if(event.edges.left) {  \r\n              let offset = (Math.floor(Math.abs(event.rect.width - _barWidth) / this.scale) + 1)* this.scale\r\n              if(offset < this.scale) {\r\n                offset = this.scale\r\n              }\r\n              if (event.deltaRect.left < 0) {\r\n                event.rect.width = _barWidth + offset\r\n              }\r\n              else {\r\n                event.rect.width = _barWidth - offset\r\n              }\r\n              if (event.rect.width < this.scale)\r\n                event.rect.width = this.scale\r\n              if (event.rect.width > this.timelineCellCount * this.scale)\r\n                event.rect.width = this.timelineCellCount * this.scale\r\n\r\n              x = Number(this.oldBarDataX) - Number(event.rect.width - _barWidth)\r\n              if(x < 0)\r\n                x = 0\r\n            }\r\n            else {\r\n              x = (parseFloat(target.getAttribute('data-x')) || 0)\r\n            }\r\n            // update the element's style\r\n            target.style.width = event.rect.width + 'px'\r\n            target.style.webkitTransform = target.style.transform = 'translate(' + x + 'px, 0px)'\r\n            target.setAttribute('data-x', x)\r\n            target.textContent = Math.round(event.rect.width) + '\\u00D7' + Math.round(event.rect.height)\r\n\r\n            let svg = Snap(bar);\r\n            // 定义一个斜条纹的画笔\r\n            let p = svg.path(\"M10-5-10,15M15,0,0,15M0-5-20,15\").attr({\r\n                fill: \"none\",\r\n                strokeOpacity: '.4',\r\n                stroke: \"gray\",\r\n                strokeWidth: 5\r\n            }).pattern(0, 0, 10, 10)\r\n\r\n            svg.rect(0, 0,event.rect.width, event.rect.height, 10).attr({fill: p})\r\n            let g = svg.g();\r\n            let innerRect = svg.rect(0, 0, event.rect.width / 2, event.rect.height, 10)\r\n\r\n            // 半透明\r\n            innerRect.attr({fill: 'red',fillOpacity: '.4'})\r\n            let text = svg.text(innerRect.node.width.baseVal.value / 2, '50%', \"50%\").attr({\r\n                stroke: \"white\",\t// 蓝色\r\n                dominantBaseline: 'middle',\r\n                fontSize: '15px'\r\n            });\r\n\r\n            // 文本居中\r\n            let xPosition = innerRect.node.width.baseVal.value / 2 - text.getBBox().width / 2\r\n            if( xPosition < 0) {\r\n              text.attr('x', innerRect.node.width.baseVal.value / 2)\r\n            } else {\r\n              text.attr('x', xPosition)\r\n            }\r\n            this.barWidth = event.rect.width\r\n            g.add(innerRect)\r\n            g.add(text)\r\n          }\r\n        },\r\n        modifiers: [\r\n          // keep the edges inside the parent\r\n          interact.modifiers.restrictEdges({\r\n            outer: 'parent'\r\n          }),\r\n\r\n          // minimum size\r\n          interact.modifiers.restrictSize({\r\n            min: { width: this.scale, height: this.barHeight },\r\n            max: { width: this.scale * this.timelineCellCount, height: this.barHeight }\r\n          })\r\n        ],\r\n        inertia: false,\r\n        hold: 1\r\n      })\r\n      // 拖动只改变x轴的坐标\r\n      function dragMoveListener(event) {\r\n        let {x} = event.target.dataset\r\n        x = (parseFloat(event.target.getAttribute('data-x')) || 0) + event.dx\r\n        Object.assign(event.target.style, {\r\n          width: `${event.rect.width}px`,\r\n          height: `${event.rect.height}px`,\r\n          transform: `translate(${x}px, 0px)`\r\n        })\r\n\r\n        event.target.setAttribute('data-x', x)\r\n        event.target.setAttribute('data-y', 0)\r\n      }\r\n    })\r\n\t},\r\n\tmethods: {\r\n    isChildOf(child, parent) {\r\n      if(child && parent) {\r\n          let parentNode = child.parentNode;\r\n          while(parentNode) {\r\n              if(parent === parentNode) {\r\n                  return true;\r\n              }\r\n              parentNode = parentNode.parentNode;\r\n          }\r\n      }\r\n      return false;\r\n    },\r\n    mouseenter(event) {\r\n      // 记录最初的 x轴值\r\n      this.oldBarDataX = event.srcElement.getAttribute('data-x')\r\n      event.stopPropagation()\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style scoped>\r\n.bar {\r\n  position: absolute;\r\n  z-index: 100;\r\n}\r\n</style>\r\n\r\n"]}]}