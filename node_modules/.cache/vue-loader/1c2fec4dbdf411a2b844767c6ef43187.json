{"remainingRequest":"D:\\Demo\\svg\\svg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Demo\\svg\\svg\\src\\Sample.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"D:\\Demo\\svg\\svg\\src\\Sample.vue","mtime":1642644062410},{"path":"D:\\Demo\\svg\\svg\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Demo\\svg\\svg\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\Demo\\svg\\svg\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\Demo\\svg\\svg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Demo\\svg\\svg\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQojYXBwIHsNCiAgZm9udC1mYW1pbHk6IEF2ZW5pciwgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjsNCiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7DQogIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7DQogIHRleHQtYWxpZ246IGxlZnQ7DQogIGNvbG9yOiAjMmMzZTUwOw0KICBoZWlnaHQ6IDEwMCU7DQogIHdpZHRoOiAxMDAlOw0KfQ0KI2FwcCwgaHRtbCwgYm9keSB7DQogIGhlaWdodDogMTAwJTsNCiAgd2lkdGg6IDEwMCU7DQogIG92ZXJmbG93OiBoaWRkZW47DQp9DQo="},{"version":3,"sources":["Sample.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Sample.vue","sourceRoot":"src","sourcesContent":["<template>\r\n  <div id=\"app\">\r\n    <svg class=\"draggable\" id=\"svg\" width=\"50px\" height=\"50px\"></svg>\r\n    <div class=\"dropzone\" style=\"width:100%;min-height:50px;border:2px solid #F1F4F5;margin:2px;padding:5px\"></div>\r\n    <div class=\"dropzone\" style=\"width:100%;min-height:50px;border:2px solid #F1F4F5;margin:2px;padding:5px\"></div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport Snap from 'snapsvg-cjs'\r\nimport interact from 'interactjs'\r\nexport default {\r\n  name: 'App',\r\n\tcomponents: {},\r\n\tdata() {\r\n\t\treturn {};\r\n\t},\r\n\tcomputed: {},\r\n\twatch: {},\r\n\tcreated: function() {},\r\n\tmounted: function() {\r\n    let that = this\r\n    let svg = Snap('.draggable');\r\n    // 定义一个斜条纹的画笔\r\n    let p = svg.path(\"M10-5-10,15M15,0,0,15M0-5-20,15\").attr({\r\n        fill: \"none\",\r\n        strokeOpacity: '.4',\r\n        stroke: \"gray\",\r\n        strokeWidth: 5\r\n    }).pattern(0, 0, 10, 10)\r\n    svg.rect(0, 0, 50, 50, 10).attr({fill: p})\r\n    let g = svg.g();\r\n    let innerRect = svg.rect(0, 0, 25, 50, 10)\r\n    // 半透明\r\n    innerRect.attr({fill: 'red',fillOpacity: '.4'})\r\n    // 居中显示文字\r\n    let text = svg.text(innerRect.node.width.baseVal.value / 2, '50%', \"50%\").attr({\r\n        stroke: \"white\",\r\n        dominantBaseline: 'middle',\r\n        fontSize: '15px'\r\n    });\r\n\r\n    // 文本居中\r\n    let xPosition = innerRect.node.width.baseVal.value / 2 - text.getBBox().width / 2\r\n    if( xPosition < 0) {\r\n      text.attr('x', innerRect.node.width.baseVal.value / 2)\r\n    } else {\r\n      text.attr('x', xPosition)\r\n    }\r\n\r\n    g.add(innerRect)\r\n    g.add(text)\r\n\r\n    interact('.draggable').draggable({\r\n        // enable inertial throwing\r\n        inertia: true,\r\n        // keep the element within the area of #app\r\n        modifiers: [\r\n            interact.modifiers.restrictRect({\r\n                restriction: '#app', // restriction: 'parent',\r\n                endOnly: true\r\n            })\r\n        ],\r\n        // enable autoScroll\r\n        autoScroll: true,\r\n        listeners: {\r\n            // call this function on every dragmove event\r\n            move: dragMoveListener,\r\n            // call this function on every dragend event\r\n            // end(event) {\r\n            //     //拖拽的距离\r\n            //     let distance = (Math.sqrt(Math.pow(event.pageX - event.x0, 2) +\r\n            //             Math.pow(event.pageY - event.y0, 2) | 0))\r\n            //         .toFixed(2)\r\n            //     console.log(distance)\r\n            // }\r\n        }\r\n    })\r\n    \r\n    interact('.draggable').resizable({\r\n      // resize from all edges and corners\r\n      edges: { left: true, right: true, bottom: false, top: false },\r\n      listeners: {\r\n        move (event) {\r\n          let target = event.target\r\n          let x = (parseFloat(target.getAttribute('data-x')) || 0)\r\n          let y = (parseFloat(target.getAttribute('data-y')) || 0)\r\n\r\n          // update the element's style\r\n          target.style.width = event.rect.width + 'px'\r\n          target.style.height = event.rect.height + 'px'\r\n\r\n          // translate when resizing from top or left edges\r\n          x += event.deltaRect.left\r\n          y += event.deltaRect.top\r\n\r\n          target.style.transform = 'translate(' + x + 'px,' + y + 'px)'\r\n\r\n          target.setAttribute('data-x', x)\r\n          target.setAttribute('data-y', y)\r\n          target.textContent = Math.round(event.rect.width) + '\\u00D7' + Math.round(event.rect.height)\r\n\r\n          let svg = Snap('#svg');\r\n          // 定义一个斜条纹的画笔\r\n          let p = svg.path(\"M10-5-10,15M15,0,0,15M0-5-20,15\").attr({\r\n              fill: \"none\",\r\n              strokeOpacity: '.4',\r\n              stroke: \"gray\",\r\n              strokeWidth: 5\r\n          }).pattern(0, 0, 10, 10)\r\n\r\n          svg.rect(0, 0,event.rect.width, event.rect.height, 10).attr({fill: p})\r\n          let g = svg.g();\r\n          let innerRect = svg.rect(0, 0, event.rect.width / 2, event.rect.height, 10)\r\n\r\n          // 半透明\r\n          innerRect.attr({fill: 'red',fillOpacity: '.4'})\r\n          let text = svg.text(innerRect.node.width.baseVal.value / 2, '50%', \"50%\").attr({\r\n              stroke: \"white\",\t// 蓝色\r\n              dominantBaseline: 'middle',\r\n              fontSize: '15px'\r\n          });\r\n\r\n          // 文本居中\r\n          let xPosition = innerRect.node.width.baseVal.value / 2 - text.getBBox().width / 2\r\n          if( xPosition < 0) {\r\n            text.attr('x', innerRect.node.width.baseVal.value / 2)\r\n          } else {\r\n            text.attr('x', xPosition)\r\n          }\r\n\r\n          g.add(innerRect)\r\n          g.add(text)\r\n        }\r\n      },\r\n      modifiers: [\r\n        // keep the edges inside the parent\r\n        interact.modifiers.restrictEdges({\r\n          outer: '#app'\r\n        }),\r\n\r\n        // minimum size\r\n        interact.modifiers.restrictSize({\r\n          min: { width: 100, height: 50 }\r\n        })\r\n      ],\r\n      inertia: true\r\n    })\r\n\r\n    interact('.dropzone').dropzone({\r\n      accept: '.draggable',\r\n      overlap: 'pointer',\r\n      ondrop: function (event) {\r\n        let isExsit = that.isChildOf(event.relatedTarget, event.target)\r\n        if (!isExsit)\r\n        {\r\n          event.target.append(event.relatedTarget)\r\n        }\r\n      }\r\n    })\r\n    // 拖动只改变x轴的坐标\r\n    function dragMoveListener(event) {\r\n        let target = event.target\r\n        // keep the dragged position in the data-x/data-y attributes\r\n        let x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx\r\n        //let y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy\r\n\r\n        // translate the element\r\n        target.style.webkitTransform =\r\n            target.style.transform =\r\n            'translate(' + x + 'px, 0px)'\r\n\r\n        // update the posiion attributes\r\n        target.setAttribute('data-x', x)\r\n        //target.setAttribute('data-y', y)\r\n    }\r\n\t},\r\n\tmethods: {\r\n    isChildOf(child, parent) {\r\n      if(child && parent) {\r\n          let parentNode = child.parentNode;\r\n          while(parentNode) {\r\n              if(parent === parentNode) {\r\n                  return true;\r\n              }\r\n              parentNode = parentNode.parentNode;\r\n          }\r\n      }\r\n      return false;\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style>\r\n#app {\r\n  font-family: Avenir, Helvetica, Arial, sans-serif;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  text-align: left;\r\n  color: #2c3e50;\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n#app, html, body {\r\n  height: 100%;\r\n  width: 100%;\r\n  overflow: hidden;\r\n}\r\n</style>\r\n\r\n"]}]}